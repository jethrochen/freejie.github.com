<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Chen Jie's Blog</title>
 <link href="http://freecoder.info//atom.xml" rel="self"/>
 <link href="http://freecoder.info"/>
 <updated>2014-07-19T23:25:18+08:00</updated>
 <id>http://freecoder.info</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>C程序存储空间布局</title>
   <link href="http://freecoder.info/linux%E7%BC%96%E7%A8%8B/2014/07/19/C%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80"/>
   <updated>2014-07-19T00:00:00+08:00</updated>
   <id>http://freecoder.info/linux%E7%BC%96%E7%A8%8B/2014/07/19/C程序的存储空间布局</id>
   <content type="html">
&lt;p&gt;C程序在虚拟内存中由代码段、初始化数据段、未初始化数据段、堆区、栈区这几部分组成。借用《Unix环境高级编程》中的图来说明。    &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/others/pic/20140719.png&quot; align=&quot;center&quot; alt=&quot;C程序存储空间布局&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;代码段&lt;/strong&gt;存放程序编译后的机器指令，是只读且可共享的。  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;初始化数据段&lt;/strong&gt;存放已被初始化的全局变量和静态变量。    &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;未初始化数据段&lt;/strong&gt;也称bbs段，存放未初始化的全局变量和静态变量，在程序执行之前这里的数据会被初始化为0或NULL。    &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;堆区&lt;/strong&gt;用于程序中的动态内存分配，如malloc分配的空间就位于堆区。堆区的数据需要手动释放或程序退出是系统来释放。    &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;栈区&lt;/strong&gt;存放函数的局部变量、参数、返回地址以及函数调用时所占用的寄存器信息，每调用一次函数就分配一个新的栈帧，因此各个函数调用实例中的变量集不会相互影响。这里的数据会由编译器来释放。   &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于static修饰的变量和函数，需要注意。局部变量被static修饰，即为局部静态变量，局部变量存储在栈区，而局部静态变量则存储在静态存储区（如果已被初始化即存储在初始化数据段，不然就存储在未初始化数据段）。局部静态变量在离开作用域后仍然存在，直到程序退出。无论局部变量所在的函数被调用多少次，该局部变量只被声明一次。全局静态变量的作用域是声明这个变量的文件。&lt;/p&gt;

&lt;p&gt;接下来结合代码详细说明。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//C程序存储空间布局
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int inited_data = 100;          //初始化数据段
int uninited_data;              //未初始化数据段
static int static_data;         //未初始化数据段

void count(void)
{
    static int num = 1;         //初始化数据段
    printf(&quot;\tthe %dth time\n&quot;, num);
    printf(&quot;\tAddress of local static varible: %p\n&quot;, &amp;amp;num);
}
int main(void)
{
    int local_data = 200;       //栈区
    char *p;                    //堆区
    
    p = (char *)malloc(4);
    printf(&quot;Text Location:\n&quot;);
    printf(&quot;\tAddress of main(Code Segment):%p\n&quot;, main);
    printf(&quot;____________________________________________\n&quot;);
    printf(&quot;Data Location\n&quot;);
    printf(&quot;\tAddress of inited global varible: %p\n&quot;, &amp;amp;inited_data);
    for (int i = 0; i &amp;lt; 5; i++)
    {
        count();
    }
    printf(&quot;____________________________________________\n&quot;);
    printf(&quot;BSS Location:\n&quot;);
    printf(&quot;\tAddress of uninited global varible %p\tuninited_data = %d\n&quot;, &amp;amp;uninited_data, uninited_data);
    printf(&quot;\tAddress of uninited global static varible %p\tuninited_global_static= %d\n&quot;, &amp;amp;static_data, static_data);
    printf(&quot;____________________________________________\n&quot;);
    printf(&quot;Heap Location:\n&quot;);
    printf(&quot;\tAddress of dynamic pointer %p\n&quot;, p);
    printf(&quot;____________________________________________\n&quot;);
    printf(&quot;Stack Location:\n&quot;);
    printf(&quot;\tAddress of local_data %p\n&quot;, &amp;amp;local_data);
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>共享内存实现进程间通信</title>
   <link href="http://freecoder.info/2014/07/17/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1"/>
   <updated>2014-07-17T00:00:00+08:00</updated>
   <id>http://freecoder.info/2014/07/17/共享内存实现进程间通信</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>约瑟夫环问题</title>
   <link href="http://freecoder.info/algorithms/2013/11/04/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98"/>
   <updated>2013-11-04T00:00:00+08:00</updated>
   <id>http://freecoder.info/algorithms/2013/11/04/约瑟夫环问题</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。
问题是，给定了n和k，一开始要站在什么地方才能避免被处决？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;问题推导：&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20131104_1.png&quot; alt=&quot;未杀戮时&quot; /&gt;
&lt;img src=&quot;/assets/img/20131104_2.png&quot; alt=&quot;未杀戮时&quot; /&gt;
&lt;img src=&quot;/assets/img/20131104_3.png&quot; alt=&quot;未杀戮时&quot; /&gt;
&lt;img src=&quot;/assets/img/20131104_4.png&quot; alt=&quot;未杀戮时&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>最大子数组和问题的几种解法</title>
   <link href="http://freecoder.info/algorithms/2013/10/17/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98"/>
   <updated>2013-10-17T00:00:00+08:00</updated>
   <id>http://freecoder.info/algorithms/2013/10/17/最大子数组问题</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;最大子数组&lt;/strong&gt;是一道经典的面试题目，面试中遇到的概率比较大，正好在算法导论中有讨论，在这里做个总结。    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;在给定的一个数组中，找到一个连续的子数组，使其和最大。就拿算法导论中的例子，给定数组为A[16]={13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7}。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题分析解决：&lt;/strong&gt;有多种方法可以解决这个问题，下面一下几种常见的方法并分析他们各自的算法复杂度。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;1.最简单粗暴的方法——穷举。&lt;/h4&gt;
&lt;p&gt;列举出所有可能的连续组合，分别求出其和。这种方法但凡学过数学的都能想到且解决，其时间复杂度为&lt;script type=&quot;math/tex&quot;&gt;\Theta(n^2)&lt;/script&gt;。这里就不讨论这种方法了，只给出程序用于验证以下方法的结果。    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;limits.h&amp;gt;

void getMaxSubarray(int a[], int len, int *low, int *high, int *maxsum)
{
    int i, j;
    int sum;
    
    *maxsum = INT_MIN;
    for (i = 0; i &amp;lt; len; ++i)
    {
        sum = 0;
        for (j = i; j &amp;lt; len; ++j)
        {
            sum += a[j];
            if (*maxsum &amp;lt; sum)
            {
                *maxsum = sum;
                *low = i; 
                *high = j;
            }
        }
    }
}

int main(void)
{
    int a[16] = {13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7};
    int low, high, maxsum;

    getMaxSubarray(a, 16, &amp;amp;low, &amp;amp;high, &amp;amp;maxsum);

    printf(&quot;the sum of maximum-subarray is %d\n&quot;, maxsum);
    printf(&quot;the index word of maximum-subarray is from %d to %d\n&quot;,
            low, high);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2.分治策略求解&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;分解：&lt;/strong&gt;假设A[low…high]是A[p…r]的最大子数组。容易理解，对于数组A[p…q]和A[q+1…r]，A[low…high]必然且仅符合下列情况之一：    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;p&amp;lt;=low&amp;lt;=high&amp;lt;=q，即A[low…high]是A[p…q]的最大子数组    &lt;/li&gt;
  &lt;li&gt;q+1&amp;lt;=high&amp;lt;=low&amp;lt;=r，即A[low…high]是A[q+1…r]的最大子数组    &lt;/li&gt;
  &lt;li&gt;low&amp;lt;=q且q+1&amp;lt;=high。    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;解决：&lt;/strong&gt;  &lt;br /&gt;
A[p…q]和A[q+1…r]可继续分解，所以只需要解决情况三即可。  &lt;br /&gt;
在上述情况三中，A[low…high]可以分为两部分：A[low…q]和A[q+1…high]。而A[low…q]是以q为右边界的和最大的子数组，A[q+1…high]是以q+1为左边界的和最大的子数组。分别求出这两部分，得到low和high的值就OK了。伪代码如下：    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FIND-MAX-CROSSING-SUBARRAY(A,p,q,r)
    leftsum = MIN_INT
    temp = 0
    for i = q downto p
        temp = temp + A[i]
        if temp &amp;gt; leftsum
            leftsum = temp
            low = i
    rightsum = MIN_INT
    temp = 0
    for j = q+1 to r
        temp = temp + A[j]
        if temp &amp;gt; rightsum
            rightsum = temp
            high = j
    return (low, high, leftsum+rightsum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;合并：&lt;/strong&gt;  &lt;br /&gt;
先分别递归求出A[low…(high+low)/2]、A[(high+low)/2+1…high]以及两者交叉部分的最大子数组的和left-sum、right-sum、cross-sum，然后比较得出三者最大的，对应的最大子数组就是所要求的最大字数组。伪代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FIND-MAXIMUM-SUBARRAY(A,low,high)
    if high == low
        return (low, high, A[low])
    else mid = (low+high)/2
        (left-low, left-high, left-sum) = FIND-MAXIMUM-SUBARRAY(A,low, mid)
        (right-low, right-high, right-sum) = FIND-MAXIMUM-SUBARRAY(A,mid+1,high)
        (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A,low, mid, high)
    if left-sum &amp;gt;= right-sum &amp;amp;&amp;amp; left-sum &amp;gt;= cross-sum
        return (left-low, left-high, left-sum)
    esleif right-sum &amp;gt;= left-sum &amp;amp;&amp;amp; right-sum &amp;gt;= cross-sum
        return (right-low, right-high, right-sum)
    else
        return (cross-low, cross-high, cross-sum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C语言实现代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;limits.h&amp;gt;

typedef struct KeyNum {
    int low;
    int high;
    int maxsum;
} KeyNum;

void findCrossMaxSubarray(int array[], int left, int right, int mid, KeyNum *key)
{
    int leftsum = INT_MIN;
    int rightsum = INT_MIN;
    int i, j;
    int temp = 0;

    for (i = mid; i &amp;gt;= left; i--)
    {
        temp += array[i];
        if (leftsum &amp;lt; temp)
        {
            leftsum = temp;
            key-&amp;gt;low = i;
        }
    }
    temp = 0;
    for (j = mid + 1; j &amp;lt;= right; j++)
    {
        temp += array[j];
        if (rightsum &amp;lt; temp)
        {
            rightsum = temp;
            key-&amp;gt;high = j;
        }
    }
    key-&amp;gt;maxsum = leftsum + rightsum;

}

KeyNum findMaximumSubarray(int array[], int left, int right)
{
    int mid;
    KeyNum leftkey, rightkey, crosskey;

    if (left &amp;gt;= right)
    {
        leftkey.low = left;
        leftkey.high = left;
        leftkey.maxsum = array[left];
        return leftkey;
    }
    mid = (left + right) / 2;
    leftkey = findMaximumSubarray(array, left, mid);
    rightkey = findMaximumSubarray(array, mid+1, right);
    findCrossMaxSubarray(array, left, right, mid, &amp;amp;crosskey);
    if (leftkey.maxsum &amp;gt;rightkey.maxsum &amp;amp;&amp;amp; leftkey.maxsum &amp;gt; crosskey.maxsum)
        return leftkey;
    else if (rightkey.maxsum &amp;gt; leftkey.maxsum &amp;amp;&amp;amp; rightkey.maxsum &amp;gt; crosskey.maxsum)
        return rightkey;
    else
        return crosskey;
}

int main(void)
{
    int a[16] = {13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7};
    KeyNum key;

    key.low = 0;
    key.high = 0;
    key.maxsum = INT_MIN;

    key = findMaximumSubarray(a, 0, 15);

    printf(&quot;the sum of maximum-subarray is %d\n&quot;, key.maxsum);
    printf(&quot;the index word of maximum-subarray is from %d to %d\n&quot;,
            key.low, key.high);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;thetan&quot;&gt;3.还有一种更精妙的方法，算法复杂度竟然达到了&lt;script type=&quot;math/tex&quot;&gt;\Theta(n)&lt;/script&gt;&lt;/h4&gt;
&lt;p&gt;先看代码吧，过把眼瘾。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int getMaxSubarray(int array[], int len, int *sum, int *low, int *high)
{
    int temp;
    int i;

    temp = *sum = 0;
    *low = *high = 0;
    for (i = 0; i &amp;lt; len; i++)
    {
        if (temp &amp;lt; 0)
        {
            temp = array[i];
            *low = i;
        }
        else 
        {
            temp += array[i];
            *high = i;
        }
        if (*sum &amp;lt; temp)
            *sum = temp;
    }

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>最大公约数之辗转相除法</title>
   <link href="http://freecoder.info/algorithms/2013/09/08/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B9%8B%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95"/>
   <updated>2013-09-08T00:00:00+08:00</updated>
   <id>http://freecoder.info/algorithms/2013/09/08/最大公约数之辗转相除法</id>
   <content type="html">
&lt;p&gt;求两个数的最大公约数，最常用的方法就是辗转相除法，具体过程如下：  &lt;br /&gt;
问题：求30和18的最大公约数&lt;br /&gt;
步骤：&lt;br /&gt;
30 = 18 * 1 + 12&lt;br /&gt;
18 = 12 * 1 +6&lt;br /&gt;
12 = 6 * 2 + 0&lt;br /&gt;
到此，余数为0，最后的除数就是要求的最大公约数。&lt;br /&gt;
整理成数学语言：
问题：求A和B的最大公约数（假设A&amp;gt;B）：&lt;br /&gt;
步骤：&lt;br /&gt;
A = B * Qn + Rn&lt;br /&gt;
B = Rn * Qn-1 + Rn-1&lt;br /&gt;
Rn = Rn-1 * Qn-2 +Rn-2&lt;br /&gt;
…………… …………&lt;br /&gt;
R3 = R2 * Q1 + R1&lt;br /&gt;
R2 = R1 * Q0 + R0&lt;br /&gt;
依此步骤，直到R0为0为止，此时的Q1即为要求的最大公约数。&lt;br /&gt;
证明：(稍后补充)    &lt;/p&gt;

&lt;p&gt;C语言实现：  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getgcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>C语言中条件预处理</title>
   <link href="http://freecoder.info/2013/07/16/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%9D%A1%E4%BB%B6%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4"/>
   <updated>2013-07-16T00:00:00+08:00</updated>
   <id>http://freecoder.info/2013/07/16/C语言中条件预处理指令</id>
   <content type="html">
&lt;p&gt;C语言中可以使用条件语句对预处理本身进行控制。这种方式为在编译过程中根据计算所得的条件值选择性地包含不同代码提供了一种手段。最常用的有一下几种：    &lt;/p&gt;

&lt;h4 id=&quot;if-defined-ifndef&quot;&gt;1.#if !defined() 与#ifndef&lt;/h4&gt;
&lt;p&gt;这个一般用于保证头文件只被包含一次。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if !defined(HDR)
#define HDR
/* hdr.h文件的内容放在这里 */
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次包含hdr.h时，将定义名字HDR，此后再次包含该头文件时，会发现该名字已经定义，就直接跳到#endif处。
C语言专门定义了两个预处理语句#ifdef与#ifndef，用来测试某个名字是否定义。上边的例子等价与&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifndef HDR
#define HDR
/* hdr.h文件的内容放在这里 */
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;if-&quot;&gt;2.#if 判断式&lt;/h4&gt;
&lt;p&gt;根据预定义的LEVEL值，判断条件满足的语句才会被编译。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define LEVEL 1
#ifdef LEVEL
#if (LEVEL &amp;gt; 0) &amp;amp;&amp;amp; (LEVEL &amp;lt; 2)
    printf(&quot;Debugging level 1&quot;);
#elif (LEVEL &amp;gt; 1) &amp;amp;&amp;amp; (LEVEL &amp;lt; 3)
    printf(&quot;Debugging level 2&quot;);
#elif (LEVEL &amp;gt; n-1) &amp;amp;&amp;amp; (LEVEL &amp;lt; n)
    printf(&quot;Debugging level n&quot;);
#endif
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;if-debug&quot;&gt;3.#if DEBUG&lt;/h4&gt;
&lt;p&gt;这一个经常被用来调试，在代码中添加一些打印信息是最常用的一种调试手段，但最终删除用来调试的打印信息却比较麻烦，这中方法可以帮我们很好地解决。看段代码test.c：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int count(num){
    int count = 0;

    while(num){
        count++;
        num = num &amp;amp; (num-1);
#if DEBUG
        printf(&quot;%d %d\n&quot;, count, num);
#endif
    }

    return count;
}

int main(void)
{
    int num = 10;
    printf(&quot;%d\n&quot;, count(num));

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用gcc test.c -o test -DDEBUG=1编译，会把#if DEBUG之间的代码编译进去，./test执行后显示
1 8
2 0
2
调试没问题之后，直接gcc test.c -o test就ok了，这样不会把用于调试的那句printf编译进去，当然也不会打印出来。
另外还有一种方法，调试的时候，在test.c开头加上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define DEBUG 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调试结束注释掉这句就OK了。这中方法在编译的时候就不需要使用-DDEBUG这个参数了&lt;/p&gt;

&lt;h4 id=&quot;if-0&quot;&gt;4.#if 0&lt;/h4&gt;
&lt;p&gt;先上代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if 0
    code
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在编译时，code部分会被忽略。于是我们就可以用这种方式进行代码注释，这样有两个好处，一是可以用作注释以解决C标准中/&lt;strong&gt;……&lt;/strong&gt;/不能嵌套的缺陷；二是code部分很长的时候要比/&lt;em&gt;……&lt;/em&gt;/更方便。在修改代码的时候，很多时候我们写的代码可能不许要了，但又不忍心删掉，这样注释是最好的办法。  &lt;br /&gt;
当然，把if后的0改为1，code部分就恢复作用。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux系统编程时间函数</title>
   <link href="http://freecoder.info/linux/2013/07/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0"/>
   <updated>2013-07-01T00:00:00+08:00</updated>
   <id>http://freecoder.info/linux/2013/07/01/Linux系统编程时间函数</id>
   <content type="html">
&lt;p&gt;在linux系统中，关于时间的函数有连个，分别是&lt;code&gt;clock_gettime()&lt;/code&gt;和&lt;code&gt;gettimeofday()&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;clockgettime&quot;&gt;关于&lt;code&gt;clock_gettime()&lt;/code&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section&quot;&gt;函数原型:&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;clockid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-1&quot;&gt;说明：&lt;/h2&gt;
    &lt;p&gt;&lt;code&gt;clock_gettime&lt;/code&gt;把当前时间用tp结构体返回，返回的时间会根据clk_id的不同而相应变化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-2&quot;&gt;结构体及参数：&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;time_t&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/* seconds */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* nanoseconds */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;clock_gettime&lt;/code&gt;调用之后，会把获取的时间存储在结构体tp中，获取的时间即为&lt;code&gt;tp-&amp;gt;tv_sev(单位为s)+tp-&amp;gt;tv_nsec(单位为ns)&lt;/code&gt;，获取的时间根据参数clk_id计算。&lt;/p&gt;

&lt;p&gt;参数clk_id有如下几个：  &lt;br /&gt;
&lt;code&gt;CLOCK_REALTIME:&lt;/code&gt;随系统实时时间改变而改变,即从UTC1970-1-1 0:0:0开始到当前系统时间所经历的ns数，如果当前时间被修改，则得到的结果也发生变化。  &lt;br /&gt;
&lt;code&gt;CLOCK_MONOTONIC:&lt;/code&gt;从系统启动那一刻起开始计时,不受系统当前时间被用户该免的影响  &lt;br /&gt;
&lt;code&gt;CLOCK_PROCESS_CPUTIME_ID:&lt;/code&gt;本进程到当前代码系统CPU花费的时间  &lt;br /&gt;
&lt;code&gt;CLOCK_THREAD_CPUTIME_ID:&lt;/code&gt;本线程到当前代码系统CPU花费的时间    &lt;/p&gt;

&lt;h4 id=&quot;gettimeofday&quot;&gt;关于函数gettimeofday&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-3&quot;&gt;函数原型：&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gettimeofday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;timeval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-4&quot;&gt;说明：&lt;/h2&gt;
    &lt;p&gt;gettimeofday会把目前的时间用tv 结构体返回，当地时区的信息则放到tz所指的结构中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-5&quot;&gt;结构体及参数：&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;timeval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/*秒*/&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tv_usec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/*微妙*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tz_minuteswest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*和greenwich 时间差了多少分钟*/&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tz_dsttime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/*type of DST correction*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在使用gettimeofday时，第二个参数一般都为空，不需要获得timezone的值。&lt;/p&gt;

&lt;h2 id=&quot;timec&quot;&gt;程序实例time.c：&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;********clock_gettime********&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCK_REALTIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CLOCK_REALTIME: %ld: %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCK_MONOTONIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CLOCK_MONOTONIC: %ld: %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCK_PROCESS_CPUTIME_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CLOCK_PROCESS_CPUTIME_ID: %ld: %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCK_THREAD_CPUTIME_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CLOCK_THREAD_CPUTIME_ID: %ld: %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*******gettimeofday*********&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;gettimeofday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;time: %ld: %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_usec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在linux下编译&lt;code&gt;gcc time.c -lrt&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>影响linux适时性的因素以及相应的改进方法</title>
   <link href="http://freecoder.info/rt-linux/2013/06/11/%E5%BD%B1%E5%93%8Dlinux%E9%80%82%E6%97%B6%E6%80%A7%E7%9A%84%E5%9B%A0%E7%B4%A0%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E6%94%B9%E8%BF%9B%E6%96%B9%E6%B3%95"/>
   <updated>2013-06-11T00:00:00+08:00</updated>
   <id>http://freecoder.info/rt-linux/2013/06/11/影响linux适时性的因素以及相应的改进方法</id>
   <content type="html">
&lt;h3 id=&quot;linux&quot;&gt;1.linux系统的实时性分析&lt;/h3&gt;
&lt;p&gt;Linux作为一个通用操作系统，主要考虑的是调度的公平性和吞吐量等指标。然而，在实时方面它还不能很好地满足实时系统方面的需要，其本身仅仅提供 了一些实时处理的支持，这包括支持大部分POSIX标准中的实时功能，支持多任务、多线程，具有丰富的通信机制等;同时也提供了符合POSIX标准的调度策略，包括FIFO调度策略、时间片轮转调度策略和静态优先级抢占式调度策略。Linux区分实时进程和普通进程，并采用不同的调度策略。&lt;/p&gt;

&lt;p&gt;为了同时支持实时和非实时两种进程，Linux的调度策略简单讲就是优先级加上时间片。当系统中有实时进程到来时，系统赋予它最高的优先级。体现在实时性上，Linux采用了两种简单的调度策略，即先来先服务调度(SCHED-FIFO)和时间片轮转调度(SCHED-RR)。具体是将所有处于运行状 态的任务挂接在一个run-queue 队列中,并将任务分成实时和非实时任务，对不同的任务，在其任务控制块task-struct中用一个policy属性来确定其调度策略。对实时性要求较 严的硬实时任务采用SCHED-FIFO调度，使之在一次调度后运行完毕。对普通非实时进程，Linux采用基于优先级的轮转策略。&lt;/p&gt;

&lt;h3 id=&quot;linux-1&quot;&gt;2 普通linux影响实时性的因素&lt;/h3&gt;

&lt;h4 id=&quot;section&quot;&gt;2.1 时钟精度&lt;/h4&gt;

&lt;p&gt;普通Linux系统的时钟中断周期为10ms，无法满足实时系统较高精度的调度要求。在实时Linux应用中，需要细化其时钟粒度，具体有两种方式可以解决时钟粒度问题：一是通过直接修改内核定时参数HZ的初值来细化时钟粒度，如将标准Linux中内核定时参数HZ改为10000, 则时钟粒度可以达到100us，这种方式虽然会增加一些系统开销，但在强周期性环境下，对定时器的设置只需初始化一次，在一定程度上保证了处理效率;二是通过对可编程中断定时器8254或先进的可编程中断控制器进行编程来改进Linux时钟机制，以提高其时钟的分辨率，使毫秒级的粗粒度定时器变成微秒级的细粒度定时器。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2.2 核心态不可抢占&lt;/h4&gt;

&lt;p&gt;当一个任务通过系统调用进入内核态运行时,一个具有更高优先级的进程，只有等待处于核心态的系统调用返回后方能执行，这将导致优先级逆转。实时任务执行时间的不确定性，显然不能满足硬实时应用的要求。改善核心态的可抢占性，有两个主要的方向：中断管理的改进和互斥锁设计的改进（《改善Linux核心可抢占性方法的研究与实现》一文中提出，尚未理解）。还有一种方法是采用双内核，一个实时内核，一个普通内核。所有实时任务都由实时内核处理，普通内核作为最低级别的任务运行在实时内核上。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2.3 内存缺页异常&lt;/h4&gt;

&lt;p&gt;Linux采用虚拟内存管理技术进行内存管理，系统将最近未使用的代码和数据置换出内存，当需要时再从硬盘导入内存。这导致进程所需页面可能被置换出内存而不能及时响应，造成系统响应时间的不确定性。一种解决方案是预先分配内存，为每个实时任务分配固定的内存区域。另一种方案是在原有虚拟内存管理的基础上加上页面锁功能，将实时任务的页面加锁，这样就不会把实时任务的页面换出内存，提高实时任务的响应速度。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;2.4 调度策略&lt;/h4&gt;

&lt;p&gt;Linux根据调度策略从整体上区分实时进程和普通进程，提供了三种条度方法。对于普通进程采用动态优先调度方法，根据剩余的时间片进行调整。对于实时进程采用FIFO（先来先服务）和RR（时间片轮转）调度，但这只能满足软实时任务的需要。当一个进程的一个时间片没有用完之前另一个即便是优先级高的进程也得不到响应。&lt;/p&gt;

&lt;p&gt;为了严格保证硬实时任务的时限要求，改善的Linux内核实时调度器采用了优先级调度算法，目前最小松弛时间优先调度算法MLF(Minimum- Laxity-First Scheduling Algorithm)是动态优先级调度最常见的实时调度策略。它在系统中为每一个任务设定松弛时间(任务的松弛时间等于任务的截止期减去任务执行时间、当前时间)即:laxity=deadline―current_time―CPU_time_needed，系统优先执行具有最小松弛时间的任务。根据就绪队列的各任务的松弛时间来 分配优先级，松弛时间最小的任务具有最高的优先级。为了提高Linux的实时性，我们设计了MLF调度器，并把它作为可加载模块加入Linux内核中，在 实现中需对内核进行相应的修改。为了区分任务的类型，对基本Linux的task_struct属性进行改进，在其中增加SCHED_MLF调度策略，并 按task_struct中的policy的取值来进行区分, 分别用SCHED_MLF，SCHED_RR，SCHED_OTHER来标识硬实时、软实时、非实时任务。将处于运行状态的三类任务放入两个队列，硬实时 任务放入hard_real_queue队列, 采用MLF调度算法，软实时和非实时任务放入non_real_queue队列(空闲任务也在其中)，沿用原内核的RR调度算法。这两个队列可以用一个 run_queue[2]的指针数组来指向。&lt;/p&gt;

&lt;p&gt;双队列任务运行过程与原内核的单运行队列执行流程的主要区别在：首先，各硬实时任务采用了MLF调度算法代替原内核的FIFO调度，提高了 Linux系统的实时性能。其次，在判断是否有软中断需要处理之前需判断硬实时任务队列是否为空，如果不为空，即使存在中断的后半部分需要处理,也要先调 度硬实时任务投入运行，在硬实时队列为空的条件下才去处理中断的后半部分(因为中断的后半部分没有硬实时任务紧急)。最后，如果没有硬实时任务存在，则说 明只有run_queue [1]队列中有软实时或非实时任务存在，这时的处理方法和原内核对单运行队列的处理方法相同。这样改进后，可以明显提高硬实时任务的调度效率，而在没有硬 实时任务时，系统性能没有变化。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;2.5 中断处理&lt;/h4&gt;

&lt;p&gt;Linux操作系统的外部中断大多是开启的，中断处理通常由设备驱动程序完成，系统将中断处理程序的优先级设定为高于任何用户进程。这种中断处理机制主要是基于通用操作系统的用户进程一般没有实时性要求，而中断处理程序与硬件设备直接交互，具有一定的实时性要求 。对于实时操作系统，用户进程都有实时性要求，设定中断处理程序优先级高于任何用户进程将不能满足实时性要求。另一方面对于发生频率不可预测的外部中断，用户程序被中断处理程序阻塞的时间开销也不可预测，从而影响了整个系统的可预测性。一种改进方法是采用中断软件模拟：当一个硬件中断发生时，系统只是简单的在事件表中报告这一事件的发生，然后立即将对CPU的使用权交给系统，而不是像一般的Linux系统那样去查找中断向量表并执行相应的中断服务程序。用中断的软件模拟相应的硬件处理，用软件的方法来检查每个中断时间的优先级，决定哪一个进程获得CPU使用权。&lt;/p&gt;

</content>
 </entry>
 
 
</feed>