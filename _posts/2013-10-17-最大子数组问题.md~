---
author: 陈杰
layout: post
category: algorithms
tags: [algorithms, 最大字数组和]
---

**最大子数组**是一道经典的面试题目，面试中遇到的概率比较大，正好在算法导论中有讨论，在这里做个总结。    

**问题描述：**在给定的一个数组中，找到一个连续的子数组，使其和最大。就拿算法导论中的例子，给定数组为A[16]={13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7}。

**问题分析解决：**有多种方法可以解决这个问题，下面一下几种常见的方法并分析他们各自的算法复杂度。

####1.最简单粗暴的方法——穷举。    
列举出所有可能的连续组合，分别求出其和。这种方法但凡学过数学的都能想到且解决，其时间复杂度为$$\Theta(n^2)$$。这里就不讨论这种方法了，只给出程序用于验证以下方法的结果。    

	#include <stdio.h>
	#include <limits.h>
	
	void getMaxSubarray(int a[], int len, int *low, int *high, int *maxsum)
	{
	    int i, j;
	    int sum;
	    
	    *maxsum = INT_MIN;
	    for (i = 0; i < len; ++i)
	    {
	        sum = 0;
	        for (j = i; j < len; ++j)
	        {
	            sum += a[j];
	            if (*maxsum < sum)
	            {
	                *maxsum = sum;
	                *low = i; 
	                *high = j;
	            }
	        }
	    }
	}
	
	int main(void)
	{
	    int a[16] = {13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7};
	    int low, high, maxsum;
	
	    getMaxSubarray(a, 16, &low, &high, &maxsum);
	
	    printf("the sum of maximum-subarray is %d\n", maxsum);
	    printf("the index word of maximum-subarray is from %d to %d\n",
	            low, high);
	
	    return 0;
	}

####2.分治策略求解    
**分解：**假设A[low...high]是A[p...r]的最大子数组。容易理解，对于数组A[p...q]和A[q+1...r]，A[low...high]必然且仅符合下列情况之一：    

- p<=low<=high<=q，即A[low...high]是A[p...q]的最大子数组    
- q+1<=high<=low<=r，即A[low...high]是A[q+1...r]的最大子数组    
- low<=q且q+1<=high。    

**解决：**    
A[p...q]和A[q+1...r]可继续分解，所以只需要解决情况三即可。    
在上述情况三中，A[low...high]可以分为两部分：A[low...q]和A[q+1...high]。而A[low...q]是以q为右边界的和最大的子数组，A[q+1...high]是以q+1为左边界的和最大的子数组。分别求出这两部分，得到low和high的值就OK了。伪代码如下：    

{% highlight cpp %}
FIND-MAX-CROSSING-SUBARRAY(A,p,q,r)
    leftsum = MIN_INT
    temp = 0
    for i = q downto p
        temp = temp + A[i]
        if temp > leftsum
            leftsum = temp
            low = i
    rightsum = MIN_INT
    temp = 0
    for j = q+1 to r
        temp = temp + A[j]
        if temp > rightsum
            rightsum = temp
            high = j
    return (low, high, leftsum+rightsum)
{% endhighlight %}

**合并：**    
先分别递归求出A[low...(high+low)/2]、A[(high+low)/2+1...high]以及两者交叉部分的最大子数组的和left-sum、right-sum、cross-sum，然后比较得出三者最大的，对应的最大子数组就是所要求的最大字数组。伪代码如下：

{% highlight cpp %}
FIND-MAXIMUM-SUBARRAY(A,low,high)
    if high == low
        return (low, high, A[low])
    else mid = (low+high)/2
        (left-low, left-high, left-sum) = FIND-MAXIMUM-SUBARRAY(A,low, mid)
        (right-low, right-high, right-sum) = FIND-MAXIMUM-SUBARRAY(A,mid+1,high)
        (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A,low, mid, high)
    if left-sum >= right-sum && left-sum >= cross-sum
        return (left-low, left-high, left-sum)
    esleif right-sum >= left-sum && right-sum >= cross-sum
        return (right-low, right-high, right-sum)
    else
        return (cross-low, cross-high, cross-sum)
{% endhighlight %}
C语言实现代码如下：

{% highlight cpp lineos %}
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct KeyNum {
    int low;
    int high;
    int maxsum;
} KeyNum;

void findCrossMaxSubarray(int array[], int left, int right, int mid, KeyNum *key)
{
    int leftsum = INT_MIN;
    int rightsum = INT_MIN;
    int i, j;
    int temp = 0;

    for (i = mid; i >= left; i--)
    {
        temp += array[i];
        if (leftsum < temp)
        {
            leftsum = temp;
            key->low = i;
        }
    }
    temp = 0;
    for (j = mid + 1; j <= right; j++)
    {
        temp += array[j];
        if (rightsum < temp)
        {
            rightsum = temp;
            key->high = j;
        }
    }
    key->maxsum = leftsum + rightsum;

}

KeyNum findMaximumSubarray(int array[], int left, int right)
{
    int mid;
    KeyNum leftkey, rightkey, crosskey;

    if (left >= right)
    {
        leftkey.low = left;
        leftkey.high = left;
        leftkey.maxsum = array[left];
        return leftkey;
    }
    mid = (left + right) / 2;
    leftkey = findMaximumSubarray(array, left, mid);
    rightkey = findMaximumSubarray(array, mid+1, right);
    findCrossMaxSubarray(array, left, right, mid, &crosskey);
    if (leftkey.maxsum >rightkey.maxsum && leftkey.maxsum > crosskey.maxsum)
        return leftkey;
    else if (rightkey.maxsum > leftkey.maxsum && rightkey.maxsum > crosskey.maxsum)
        return rightkey;
    else
        return crosskey;
}

int main(void)
{
    int a[16] = {13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7};
    KeyNum key;

    key.low = 0;
    key.high = 0;
    key.maxsum = INT_MIN;

    key = findMaximumSubarray(a, 0, 15);

    printf("the sum of maximum-subarray is %d\n", key.maxsum);
    printf("the index word of maximum-subarray is from %d to %d\n",
            key.low, key.high);

    return 0;
}
{% endhighlight %}

####3.还有一种更精妙的方法，算法复杂度竟然达到了$$\Theta(n)$$    
先看代码吧，过把眼瘾。  

{% highlight cpp lineos %}
int getMaxSubarray(int array[], int len, int *sum, int *low, int *high)
{
    int temp;
    int i;

    temp = *sum = 0;
    *low = *high = 0;
    for (i = 0; i < len; i++)
    {
        if (temp < 0)
        {
            temp = array[i];
            *low = i;
        }
        else 
        {
            temp += array[i];
            *high = i;
        }
        if (*sum < temp)
            *sum = temp;
    }

    return 0;
}

{% endhighlight cpp %} 
